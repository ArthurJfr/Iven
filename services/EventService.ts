import { apiService } from './ApiService';
import type { ApiResponse } from '../types/api';

// Types adapt√©s √† votre structure de base de donn√©es actuelle
export interface CreateEventRequest {
  title: string;
  description?: string;
  start_date: string; // Format MySQL DATETIME: YYYY-MM-DD HH:MM:SS
  end_date: string;   // Format MySQL DATETIME: YYYY-MM-DD HH:MM:SS
  location?: string;
  owner_id: number;
}

export interface Event {
  id: number;
  owner_id: number;
  title: string;
  description?: string;
  start_date: string;
  end_date: string;
  location?: string;
  created_at: string;
  updated_at: string;
}

export interface EventListResponse {
  events: Event[];
  total: number;
  page: number;
  limit: number;
}

/**
 * Service de gestion des √©v√©nements
 */
class EventService {
  private readonly BASE_URL = '/event';

  /**
   * Cr√©er un nouvel √©v√©nement
   */
  async createEvent(eventData: CreateEventRequest): Promise<ApiResponse<Event>> {
    try {
      console.info('üìÖ Cr√©ation d\'√©v√©nement:', eventData);
      
      // Validation des donn√©es avant envoi
      if (!this.validateEventData(eventData)) {
        return {
          success: false,
          error: 'Donn√©es d\'√©v√©nement invalides'
        };
      }

      // Appel √† l'API backend - endpoint corrig√©
      const response = await apiService.post<Event>(`${this.BASE_URL}/create`, eventData);
      
      if (response.success) {
        console.info('‚úÖ √âv√©nement cr√©√© avec succ√®s');
      } else {
        console.error('‚ùå √âchec de cr√©ation de l\'√©v√©nement:', response.error);
      }
      
      return response;
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'√©v√©nement:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la cr√©ation de l\'√©v√©nement'
      };
    }
  }

  /**
   * R√©cup√©rer un √©v√©nement par son ID
   */
  async getEventById(eventId: number): Promise<ApiResponse<Event>> {
    try {
      console.info(` R√©cup√©ration de l'√©v√©nement ${eventId}`);
      
      const response = await apiService.get<Event>(`${this.BASE_URL}/${eventId}`);
      
      if (response.success) {
        console.info('‚úÖ √âv√©nement r√©cup√©r√© avec succ√®s');
      }
      
      return response;
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'√©v√©nement:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la r√©cup√©ration de l\'√©v√©nement'
      };
    }
  }

  /**
   * R√©cup√©rer tous les √©v√©nements d'un propri√©taire
   */
  async getEventsByOwnerId(ownerId: number): Promise<ApiResponse<Event[]>> {
    try {
      console.info(`üìÖ R√©cup√©ration des √©v√©nements du propri√©taire ${ownerId}`);
      
      const response = await apiService.get<Event[]>(`${this.BASE_URL}/owner/${ownerId}`);
      
      if (response.success) {
        console.info(`‚úÖ ${response.data?.length || 0} √©v√©nements r√©cup√©r√©s`);
      }
      
      return response;
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la r√©cup√©ration des √©v√©nements'
      };
    }
  }

  /**
   * R√©cup√©rer tous les √©v√©nements d'un participant
   */
  async getEventsByParticipantId(participantId: number): Promise<ApiResponse<Event[]>> {
    try {
      console.info(`üìÖ R√©cup√©ration des √©v√©nements du participant ${participantId}`);
      
      const response = await apiService.get<Event[]>(`${this.BASE_URL}/participant/${participantId}`);
      
      if (response.success) {
        console.info(`‚úÖ ${response.data?.length || 0} √©v√©nements r√©cup√©r√©s`);
      }
      
      return response;
    } catch (error: any) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la r√©cup√©ration des √©v√©nements'
      };
    }
  }

  /**
   * Valider les donn√©es d'un √©v√©nement avant envoi
   */
  private validateEventData(eventData: CreateEventRequest): boolean {
    // V√©rification des champs obligatoires
    if (!eventData.title || !eventData.start_date || !eventData.end_date || !eventData.owner_id) {
      console.warn('‚ö†Ô∏è Champs obligatoires manquants:', eventData);
      return false;
    }

    // V√©rification du format des dates
    const startDate = new Date(eventData.start_date);
    const endDate = new Date(eventData.end_date);
    
    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
      console.warn('‚ö†Ô∏è Format de date invalide:', { start_date: eventData.start_date, end_date: eventData.end_date });
      return false;
    }

    // V√©rification que la date de fin est post√©rieure √† la date de d√©but
    if (endDate <= startDate) {
      console.warn('‚ö†Ô∏è Date de fin doit √™tre post√©rieure √† la date de d√©but');
      return false;
    }

    // V√©rification du format MySQL DATETIME
    const dateTimeRegex = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/;
    if (!dateTimeRegex.test(eventData.start_date) || !dateTimeRegex.test(eventData.end_date)) {
      console.warn('‚ö†Ô∏è Format DATETIME MySQL invalide:', { start_date: eventData.start_date, end_date: eventData.end_date });
      return false;
    }

    return true;
  }

  /**
   * Formater une date en format MySQL DATETIME
   */
  static formatToMySQLDateTime(date: Date, time?: string): string {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    
    if (time) {
      // Si une heure est sp√©cifi√©e, l'utiliser
      return `${year}-${month}-${day} ${time}`;
    } else {
      // Sinon, utiliser minuit
      return `${year}-${month}-${day} 00:00:00`;
    }
  }

  /**
   * Parser une date au format fran√ßais (DD/MM/YYYY) vers un objet Date
   */
  static parseFrenchDate(frenchDate: string): Date | null {
    try {
      if (frenchDate.includes('/')) {
        const [day, month, year] = frenchDate.split('/');
        const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
        
        if (isNaN(date.getTime())) {
          return null;
        }
        
        return date;
      }
      return null;
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur parsing date fran√ßaise:', frenchDate, error);
      return null;
    }
  }
}

// Instance singleton
export const eventService = new EventService();
