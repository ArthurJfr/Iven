import React, { createContext, useContext, useState, useEffect, ReactNode, useCallback } from 'react';
import { authService } from '../services/AuthService';
import type { User } from '../types/auth';

interface AuthContextType {
  // √âtat de l'authentification
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  isCheckingToken: boolean;
  
  // Actions d'authentification
  login: (user: User, token: string) => Promise<void>;
  logout: () => Promise<void>;
  updateUser: (user: User) => void;
  initialize: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  // √âtat local
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isCheckingToken, setIsCheckingToken] = useState(false);

  // √âtat calcul√©
  const isAuthenticated = !!(user && authService.getAuthToken());

  /**
   * Initialise le contexte d'authentification au d√©marrage de l'application
   */
  const initialize = useCallback(async (): Promise<void> => {
    try {
      setIsLoading(true);
      setIsCheckingToken(true);
      
      console.info('üîÑ Initialisation du contexte d\'authentification...');
      const sessionRestored = await authService.initialize();
      
      if (sessionRestored) {
        const currentUser = authService.getCurrentUser();
        if (currentUser) {
          setUser(currentUser);
          console.info('‚úÖ Session restaur√©e:', currentUser.email);
        }
      } else {
        setUser(null);
        console.info('‚ÑπÔ∏è Aucune session √† restaurer');
      }
    } catch (error) {
      console.error('‚ùå Erreur initialisation AuthContext:', error);
      setUser(null);
    } finally {
      setIsLoading(false);
      setIsCheckingToken(false);
    }
  }, []);

  /**
   * Connecte un utilisateur et persiste la session
   */
  const login = useCallback(async (userData: User, token: string): Promise<void> => {
    try {
      console.info('üîê Connexion de l\'utilisateur:', userData.email);
      
      // Synchroniser avec le service d'authentification
      authService.setCurrentUser(userData);
      authService.setAuthToken(token);
      
      // Pr√©parer les donn√©es de session
      const authData = {
        token,
        user: userData,
        expiresAt: new Date(Date.now() + 72 * 60 * 60 * 1000).toISOString()
      };
      
      // Persister la session
      await authService.persistSession(authData);
      
      // Mettre √† jour l'√©tat local
      setUser(userData);
      
      console.info('‚úÖ Utilisateur connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur lors de la connexion:', error);
      throw error;
    }
  }, []);

  /**
   * D√©connecte l'utilisateur et nettoie la session
   */
  const logout = useCallback(async (): Promise<void> => {
    try {
      console.info('üîê D√©connexion de l\'utilisateur...');
      await authService.logout();
      setUser(null);
      console.info('‚úÖ Utilisateur d√©connect√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©connexion:', error);
      // Force la d√©connexion locale m√™me en cas d'erreur
      setUser(null);
    }
  }, []);

  /**
   * Met √† jour les donn√©es utilisateur
   */
  const updateUser = useCallback((userData: User): void => {
    console.info('üîÑ Mise √† jour des donn√©es utilisateur:', userData.email);
    authService.setCurrentUser(userData);
    setUser(userData);
  }, []);

  // Initialisation au montage du composant
  useEffect(() => {
    initialize();
  }, [initialize]);

  // M√©morisation de la valeur du contexte pour √©viter les re-renders inutiles
  const contextValue: AuthContextType = React.useMemo(() => ({
    // √âtat
    user,
    isAuthenticated,
    isLoading,
    isCheckingToken,
    
    // Actions
    login,
    logout,
    updateUser,
    initialize
  }), [user, isAuthenticated, isLoading, isCheckingToken, login, logout, updateUser, initialize]);

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
}

/**
 * Hook pour utiliser le contexte d'authentification
 * @throws {Error} Si utilis√© en dehors d'un AuthProvider
 */
export function useAuth(): AuthContextType {
  const context = useContext(AuthContext);
  
  if (context === undefined) {
    throw new Error(
      'useAuth doit √™tre utilis√© √† l\'int√©rieur d\'un AuthProvider. ' +
      'Assurez-vous que votre composant est envelopp√© dans <AuthProvider>.'
    );
  }
  
  return context;
}

export default AuthContext;